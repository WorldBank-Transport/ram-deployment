AWSTemplateFormatVersion: '2010-09-09'
Description: 'stack: {{stackName}} | deployed by Kes'

Resources:
  #################################################
  # IAM Roles BEGIN
  #################################################

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: {{stackName}}-ecs
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ECSRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:GetMetricStatistics
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecs:DeregisterContainerInstance
                  - ecs:DescribeClusters
                  - ecs:DescribeContainerInstances
                  - ecs:DescribeServices
                  - ecs:DiscoverPollEndpoint
                  - ecs:ListContainerInstances
                  - ecs:ListServices
                  - ecs:ListTaskDefinitions
                  - ecs:ListTasks
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:RunTask
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: "*"

              # Allow writing to ingest buckets
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:Get*
                  - s3:Put*
                  - s3:List*
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource:
                  - arn:aws:s3:::{{bucket}}
                  - arn:aws:s3:::{{bucket}}/*


  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: {{stackName}}-ecs
      Path: "/"
      Roles:
        - !Ref ECSRole

  #################################################
  # IAM Roles END
  #################################################

  #################################################
  # ECS config BEGIN
  #################################################


  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: {{stackName}}-ecs-securitygroup
      GroupDescription: Security Group for ECS containter instances of {{stackName}}
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '80'
          ToPort: '80'
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '22'
          ToPort: '22'
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '5432'
          ToPort: '5432'
      Tags:
        - Key: Name
          Value: "{{stackName}}"
      VpcId: {{vpc.id}}

  ECSCluster:
    Type: AWS::ECS::Cluster

{{# if ecs.ec2}}
  {{# each ecs.ec2}}
  {{@key}}EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: {{../ecs.amiid}}
      InstanceType: {{this.instanceType}}
      AvailabilityZone: {{../ecs.availabilityZone}}
      IamInstanceProfile:
        Ref: InstanceProfile
      KeyName: {{ ../ecs.keyPairName }}
      SecurityGroupIds:
        - Fn::GetAtt:
          - SecurityGroup
          - GroupId
      SubnetId: {{../vpc.subnet}}
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash\n"
              - Fn::Sub: "echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config"
      Volumes: 
        - VolumeId:
            Ref: {{@key}}Ec2Volume
          Device: "/dev/sdk"
      Tags:
        - Key: Name
          Value: "{{../stackName}}-{{@key}}"
        - Key: Stack
          Value: {{../stackName}}

  {{@key}}Ec2Volume:
    Type: "AWS::EC2::Volume"
    Properties:
      Size: {{this.volumeSize}}
      AvailabilityZone: {{../ecs.availabilityZone}}

  {{/each}}
{{/if}}

{{# if ecs.autoscaling}}
  ContainerInstanceLaunch:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: 
                Fn::Sub: |
                  #!/bin/bash
                  echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                  
          files:
            "/etc/cfn/cfn-hup.conf":
              content:
                Fn::Sub: |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                Fn::Sub: |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.ContainerInstanceLaunch.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstanceLaunch --region ${AWS::Region}
                  runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
    {{# if vpc.subnets }}
      AssociatePublicIpAddress: {{#if ecs.publicIp}}{{ecs.publicIp}}{{else}}false{{/if}}
    {{/if}}
      SecurityGroups:
        - Fn::GetAtt:
          - SecurityGroup
          - GroupId
      ImageId: {{ecs.amiid}}
      InstanceType: {{ecs.autoscaling.instanceType}}
      IamInstanceProfile:
        Fn::GetAtt:
          - InstanceProfile
          - Arn
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: {{ecs.autoscaling.volumeSize}}
    {{# if ecs.keyPairName }}
      KeyName: {{ ecs.keyPairName }}
    {{/if}}
      UserData:
        "Fn::Base64":
          Fn::Join:
            - ""
            - - "#cloud-config\n"
              - "\nruncmd:\n"
              - " - yum install -y aws-cfn-bootstrap\n"
              - Fn::Sub: " - /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstanceLaunch --region ${AWS::Region}\n"
              - Fn::Sub: " - /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}"


  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
    Properties:
      AvailabilityZones:
        - {{ecs.availabilityZone}}
      VPCZoneIdentifier:
        - {{vpc.subnet}}
      LaunchConfigurationName:
        Ref: ContainerInstanceLaunch
      MinSize: '0'
      MaxSize: {{ ecs.autoscaling.maxInstances }}
      DesiredCapacity: {{ ecs.autoscaling.desiredInstances }}
      Tags:
      - Key: Name
        Value: "{{stackName}}-ecs"
        PropagateAtLaunch: true
{{/if}}

  #################################################
  # ECS config END
  #################################################

  #################################################
  # TaskDefinition BEGIN
  #################################################

  # adding TaskDefinition for Lambda/ECS services
{{#each taskDefinitions}}
  {{@key}}TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
        - Name: {{this.volume.name}}
          Host:
            SourcePath: {{this.volume.path}} 
      {{# if this.networkMode }}
      NetworkMode: {{this.networkMode}}
      {{/if}}
    {{#if this.placementConstraints }}
      PlacementConstraints:
        - type: {{this.placementConstraints.type}}
      {{#if this.placementConstraints.expression}}
          expression: {{{this.placementConstraints.expression}}}
      {{/if}}
    {{/if}}
      ContainerDefinitions:
      {{#each this.containers}}
        - Name: {{@key}}
          Cpu: {{#if this.cpu }}{{ this.cpu }}{{ else }}10{{/if}}
          Essential: true
          {{#if this.mount}}
          MountPoints:
            - SourceVolume: {{this.mount.volume}}
              ContainerPath: {{this.mount.destination}}
          {{/if}}
        {{#if this.ports}}
          PortMappings:
          {{#each this.ports}}
            - ContainerPort: {{this.container}} 
              HostPort: {{this.host}}
              Protocol: {{this.protocol}}
          {{/each}}
        {{/if}}
        {{#if this.links}}
          Links:
          {{#each this.links}}
            - {{this}}
          {{/each}}
        {{/if}}
        {{#if this.envs}}
          Environment:
          {{# each this.envs}}
            - Name: {{@key}}
              Value: {{this}}
          {{/each}}
        {{/if}}
          Image: {{this.image}}
          MemoryReservation: {{#if this.memory }}{{ this.memory }}{{ else }}256{{/if}}
      {{# if this.commands }}
          Command:
        {{# each this.commands }}
            - {{{ @this }}}
        {{/each}}
      {{/if}}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: {{@../key}}EcsLogs
              awslogs-region:
                Fn::Sub: ${AWS::Region}
      {{/each}}

  {{@key}}EcsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: {{../stackName}}-{{@key}}EcsLogs

  {{@key}}ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: {{# if this.count}}{{this.count}}{{ else }} 0 {{/if}}
      TaskDefinition:
        Ref: {{@key}}TaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0 
{{/each}}

  #################################################
  # TaskDefinition END 
  #################################################


{{# if ecs.ec2}}
Outputs:
  {{# each ecs.ec2}}
  {{@key}}IpAddress:
    Value:
      Fn::GetAtt:
        - {{@key}}EC2Instance
        - PublicIp
  {{/each}}
{{/if}}

