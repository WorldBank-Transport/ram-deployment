default:
  stackName: ram-demo-test-cf
  bucket: ram-demo
  capabilities:
    - CAPABILITY_NAMED_IAM

  vpc:
    id: vpc-dfe524ba
    subnet: subnet-7945cb75

  # instances created by this config are configured to work with ECS service
  ecs:
    publicIp: true # whether the ec2 instance have public IP addresses
    availabilityZone: us-east-1f # IMPORTANT: subnet and availability zone must be in the same zone
    amiid: ami-aff65ad2	 # which ec2 AMI to use for the ec2 instances
    keyPairName: ruralroads # the ssh key to use for login into instance
    # only uncomment this if autoscaling ec2 support is needed
    # autoscaling:
    #   instanceType: t2.small # size of the ec2 instance
    #   volumeSize: 30 # the size of the storage on the ec2 instance
    #   maxInstances: 0
    #   desiredInstances: 0
    ec2:
      api:
        instanceType: t2.medium # size of the ec2 instance
        volumeSize: 30
      frontend:
        instanceType: t2.micro
        volumeSize: 8

  taskDefinitions:
    ramApi:
      count: 1
      networkMode: null
      volume:
        name: pos
        path: /var/lib/postgresql/data # this is the path on the source machine
      containers:
        ram-api:
          image: wbtransport/ram-backend:v0.5.0
          #cpu: 10 # this is an optional key
          memory: 2500 # defaults to 256mb
          links:
            - ram-postgis
          ports:
            - host: 80
              container: 4000 
              protocol: tcp
          envs:
            ANL_CONTAINER: wbtransport/ram-analysis:v0.1.0
            ANL_DB: 'postgresql://ram:ram@{{ANL_IP_ADDRESS}}:5432/ram'
            ANL_SERVICE: hyper
            DB_CONNECTION: 'postgresql://ram:ram@ram-postgis:5432/ram'
            DS_ENV: staging
            HYPER_ACCESS: '{{HYPER_ACCESS}}'
            HYPER_SECRET: '{{HYPER_SECRET}}'
            HYPER_SIZE: L3
            STORAGE_BUCKET: '{{STORAGE_BUCKET}}'
            STORAGE_REGION: '{{STORAGE_REGION}}'
            STORAGE_ACCESS_KEY: '{{STORAGE_ACCESS_KEY}}'
            STORAGE_SECRET_KEY: '{{STORAGE_SECRET_KEY}}'
            VT_SERVICE: hyper
            VT_CONTAINER: wbtransport/ram-vt:v0.1.0
          commands:
            - node
            - index.js
        ram-postgis:
          image: mdillon/postgis
          memory: 1000 # defaults to 256mb
          ports:
            - host: 5432
              container: 5432
              protocol: tcp
          mount:
            volume: pos
            destination: /var/lib/postgresql/data
          envs:
            POSTGRES_DB: ram
            POSTGRES_PASSWORD: ram
            POSTGRES_USER: ram
    ramFrontend:
      count: 1
      networkMode: null
      volume:
        name: pos
        path: /var/lib/postgresql/data # this is the path on the source machine
      containers:
        ram-frontend:
          image: wbtransport/ram-frontend:v0.6.0
          ports:
            - host: 80
              container: 80
              protocol: tcp
          apiMachine: api # name of the EC2 machine that the API is hosted on
          envs:
            MBTOKEN: '{{MB_TOKEN}}'
  tags:
    project: ruralroads

ds-staging:
  stackName: ram-staging-deploy-cf

ram-demo:
  stackName: ram-demo-cf
  bucket: ram-demo
